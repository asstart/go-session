// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	go_session "github.com/asstart/go-session"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionServiceInterface is a mock of SessionServiceInterface interface.
type MockSessionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceInterfaceMockRecorder
}

// MockSessionServiceInterfaceMockRecorder is the mock recorder for MockSessionServiceInterface.
type MockSessionServiceInterfaceMockRecorder struct {
	mock *MockSessionServiceInterface
}

// NewMockSessionServiceInterface creates a new mock instance.
func NewMockSessionServiceInterface(ctrl *gomock.Controller) *MockSessionServiceInterface {
	mock := &MockSessionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSessionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionServiceInterface) EXPECT() *MockSessionServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateAnonymSession mocks base method.
func (m *MockSessionServiceInterface) CreateAnonymSession(ctx context.Context, cc go_session.CookieConf, sc go_session.SessionConf, keyAndValues ...interface{}) (go_session.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, cc, sc}
	for _, a := range keyAndValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnonymSession", varargs...)
	ret0, _ := ret[0].(go_session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnonymSession indicates an expected call of CreateAnonymSession.
func (mr *MockSessionServiceInterfaceMockRecorder) CreateAnonymSession(ctx, cc, sc interface{}, keyAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, cc, sc}, keyAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnonymSession", reflect.TypeOf((*MockSessionServiceInterface)(nil).CreateAnonymSession), varargs...)
}

// CreateUserSession mocks base method.
func (m *MockSessionServiceInterface) CreateUserSession(ctx context.Context, uid string, cc go_session.CookieConf, sc go_session.SessionConf, keyAndValues ...interface{}) (go_session.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, uid, cc, sc}
	for _, a := range keyAndValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserSession", varargs...)
	ret0, _ := ret[0].(go_session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSession indicates an expected call of CreateUserSession.
func (mr *MockSessionServiceInterfaceMockRecorder) CreateUserSession(ctx, uid, cc, sc interface{}, keyAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, uid, cc, sc}, keyAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSession", reflect.TypeOf((*MockSessionServiceInterface)(nil).CreateUserSession), varargs...)
}

// InvalidateSession mocks base method.
func (m *MockSessionServiceInterface) InvalidateSession(ctx context.Context, sid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateSession", ctx, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateSession indicates an expected call of InvalidateSession.
func (mr *MockSessionServiceInterfaceMockRecorder) InvalidateSession(ctx, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateSession", reflect.TypeOf((*MockSessionServiceInterface)(nil).InvalidateSession), ctx, sid)
}

// LoadSession mocks base method.
func (m *MockSessionServiceInterface) LoadSession(ctx context.Context, sid string) (go_session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSession", ctx, sid)
	ret0, _ := ret[0].(go_session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSession indicates an expected call of LoadSession.
func (mr *MockSessionServiceInterfaceMockRecorder) LoadSession(ctx, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSession", reflect.TypeOf((*MockSessionServiceInterface)(nil).LoadSession), ctx, sid)
}
